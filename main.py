# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'new.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import random
import math
import csv
from collections import Counter, OrderedDict

students = []


class Ui_MainWindow(object):

    def __init__(self):
        super().__init__()
        self.r_file = ""

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(703, 547)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalScrollBar = QtWidgets.QScrollBar(self.centralwidget)
        self.verticalScrollBar.setGeometry(QtCore.QRect(1420, 0, 16, 160))
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(20, 310, 561, 71))
        self.textEdit.setObjectName("textEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(370, 50, 113, 32))
        self.pushButton.clicked.connect(self.open_file)
        self.pushButton.setObjectName("pushButton")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(20, 150, 91, 31))
        self.textBrowser.setObjectName("textBrowser")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(120, 150, 41, 31))
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(190, 150, 91, 31))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(290, 150, 41, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_3.setGeometry(QtCore.QRect(360, 150, 91, 31))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(460, 150, 41, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_4.setGeometry(QtCore.QRect(530, 150, 91, 31))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(630, 150, 41, 31))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.textBrowser_5 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_5.setGeometry(QtCore.QRect(20, 200, 91, 31))
        self.textBrowser_5.setObjectName("textBrowser_5")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(120, 200, 41, 31))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(290, 200, 41, 31))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.textBrowser_6 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_6.setGeometry(QtCore.QRect(190, 200, 91, 31))
        self.textBrowser_6.setObjectName("textBrowser_6")
        self.textBrowser_7 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_7.setGeometry(QtCore.QRect(360, 200, 91, 31))
        self.textBrowser_7.setObjectName("textBrowser_7")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setGeometry(QtCore.QRect(460, 200, 41, 31))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.textBrowser_8 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_8.setGeometry(QtCore.QRect(20, 50, 321, 31))
        self.textBrowser_8.setObjectName("textBrowser_8")
        self.textBrowser_9 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_9.setGeometry(QtCore.QRect(20, 10, 321, 31))
        self.textBrowser_9.setObjectName("textBrowser_9")
        self.textBrowser_10 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_10.setGeometry(QtCore.QRect(20, 110, 561, 31))
        self.textBrowser_10.setObjectName("textBrowser_10")
        self.textBrowser_11 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_11.setGeometry(QtCore.QRect(20, 260, 621, 41))
        self.textBrowser_11.setObjectName("textBrowser_11")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(550, 430, 121, 51))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.club_assign)
        self.textBrowser_12 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_12.setGeometry(QtCore.QRect(20, 410, 231, 31))
        self.textBrowser_12.setObjectName("textBrowser_12")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_8.setGeometry(QtCore.QRect(20, 450, 161, 31))
        self.lineEdit_8.setObjectName("lineEdit_8")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 703, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def club_assign(self):
        grades_priority = [7, 6, 8]
        students = []
        students_priority = []
        students_club_selected = []
        club_names = []
        clubs = {}
        clubs_count = {}
        clubs_priority = clubs.copy()
        choice_views = []
        students_final = []

        try:
            with open(self.r_file, 'r') as csvfile:
                self.data = csv.reader(csvfile)
                for row in self.data:
                    students.append(
                        [int(row[int(self.lineEdit.text()) - 1]), int(row[int(self.lineEdit_2.text()) - 1]), int(row[int(self.lineEdit_3.text()) - 1]),
                         int(row[int(self.lineEdit_4.text()) - 1]), row[int(self.lineEdit_5.text()) - 1], row[int(self.lineEdit_6.text()) - 1], row[int(self.lineEdit_7.text()) - 1]])
                csvfile.close()

            club_infos = self.textEdit.toPlainText().split(",")
            for club in club_infos:
                club_infos[club_infos.index(club)] = club_infos[club_infos.index(club)].strip()
            last_num = club_infos[-1].split('\n')[0]
            club_infos.pop(-1)
            club_infos.append(last_num)
            index = 0
            for i in range(int(len(club_infos) / 2)):
                clubs[club_infos[index]] = int(club_infos[index + 1])
                club_names.append(club_infos[index])
                clubs_count[club_infos[index]] = 0
                index += 2

            first_choice = []
            # sorting
            for student in students:
                first_choice.append(student[-3])
            clubs_sorted = Counter(first_choice)
            # include clubs not in anyone's first club
            clubs_left = club_names.copy()
            for item in clubs_sorted:
                clubs_left.pop(clubs_left.index(item))
            for club in clubs_left:
                clubs_sorted[club] = 0
            value = 1
            # determine club weights
            for item in clubs_sorted.most_common():
                clubs_priority[item[0]] = value
                value += 1

            for student in students:
                students_priority.append([int(student[0]), int(len(club_names) * 0.6), math.ceil((len(club_names) / 2) * 0.6), 1])
                choice_num = -3
                for choice in student[-3:]:
                    students_priority[students.index(student)][choice_num] += clubs_priority[choice]
                    choice_num += 1
            def club_student_preference(grade):
                student_index = 0
                for student in students_priority:
                    # TODO: Change 1 to # of elements in front of priority
                    # define student's first, second, third priority from priority chart
                    priorities = student[-3:]
                    priorities.sort(reverse=True)
                    first_priority = int(4 + (student[-3:].index(priorities[0])))
                    second_priority = int(4 + (student[-3:].index(priorities[1])))
                    third_priority = int(4 + (student[-3:].index(priorities[2])))
                    student_loc = student_index
                    avg = int(len(students) / len(club_names))
                    student_index += 1
                    if student[0] == grade:
                        # if weight same, student choice preferred
                        # if priority choice and club members don't exceed club avg member, add student
                        if clubs[students[student_loc][first_priority]] > 0 and clubs_count[
                            students[student_loc][first_priority]] < avg:
                            students_club_selected.append([student, first_priority])
                            choice_views.append(first_priority - 3)
                            clubs[students[student_loc][first_priority]] -= 1
                            clubs_count[students[student_loc][first_priority]] += 1
                            students_final.append([students[student_loc][:4], students[student_loc][first_priority]])
                        elif clubs[students[student_loc][second_priority]] > 0 and clubs_count[
                            students[student_loc][second_priority]] < avg:
                            students_club_selected.append([student, second_priority])
                            choice_views.append(second_priority - 3)
                            clubs[students[student_loc][second_priority]] -= 1
                            clubs_count[students[student_loc][second_priority]] += 1
                            students_final.append([students[student_loc][:4], students[student_loc][second_priority]])
                        elif clubs[students[student_loc][third_priority]] > 0 and clubs_count[
                            students[student_loc][third_priority]] < avg:
                            students_club_selected.append([student, third_priority])
                            choice_views.append(third_priority - 3)
                            clubs[students[student_loc][third_priority]] -= 1
                            clubs_count[students[student_loc][third_priority]] += 1
                            students_final.append([students[student_loc][:4], students[student_loc][third_priority]])
                        # if all priority choices are blocked by averages, add student in student's first, second, third choice based on remaining seats
                        elif clubs[students[student_loc][-3]] > 0:
                            students_club_selected.append([student, students[student_loc][-3]])
                            clubs[students[student_loc][-3]] -= 1
                            clubs_count[students[student_loc][-3]] += 1
                            choice_views.append(1)
                            students_final.append([students[student_loc][:4], students[student_loc][first_priority]])
                        elif clubs[students[student_loc][-2]] > 0:
                            students_club_selected.append([student, students[student_loc][-2]])
                            clubs[students[student_loc][-2]] -= 1
                            clubs_count[students[student_loc][-2]] += 1
                            choice_views.append(2)
                            students_final.append([students[student_loc][:4], students[student_loc][second_priority]])
                        elif clubs[students[student_loc][-1]] > 0:
                            students_club_selected.append([student, students[student_loc][-1]])
                            clubs[students[student_loc][-1]] -= 1
                            clubs_count[students[student_loc][-1]] += 1
                            choice_views.append(3)
                            students_final.append([students[student_loc][:4], students[student_loc][third_priority]])

            def grade_order(first, second, third):
                club_student_preference(int(first))
                club_student_preference(int(second))
                club_student_preference(int(third))

            order = [6, 7, 8]
            random.shuffle(order)
            grade_order(order[0], order[1], order[2])
            print(students)
            print(clubs)
            print(clubs_sorted)
            print(clubs_count)
            print(club_names)
            print(Counter(choice_views))
            print(students_priority)
            print(clubs_count)
            print(students_final)
            print(choice_views)

            with open(self.lineEdit_8.text()+".csv", 'w') as w_file:
                writefile = csv.writer(w_file)
                writefile.writerow(["Grade Level", "Student Name", "ID Number", "Advisory", "Assigned Club", "Choice Num"])
                for student in students_final:
                    writefile.writerow([student[0][0], student[0][1], student[0][2], student[0][3], student[1], choice_views[students_final.index(student)]])


        except FileNotFoundError:
            fileNotFound = QtWidgets.QMessageBox()
            fileNotFound.setWindowTitle("Warning")
            fileNotFound.setText("Please open a file first")
            fileNotFound.exec_()

        # except IndexError:
        #     indexe = QtWidgets.QMessageBox()
        #     indexe.setWindowTitle("Warning")
        #     indexe.setText("Not enough columns in data. Please review")
        #     indexe.exec_()

        except ValueError:
            not_filled = QtWidgets.QMessageBox()
            not_filled.setWindowTitle("Warning")
            not_filled.setText("Please fill out all the queries")
            not_filled.exec_()

    def open_file(self):
        fname, filter = QtWidgets.QFileDialog.getOpenFileName()
        if fname == '':
            return
        if os.path.isfile(fname):
            file_type = fname.split(".")[-1]
            if file_type == "csv":
                self.r_file = fname
                self.textBrowser_8.setText(self.r_file.split("/")[-1])
            else:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Warning")
                msg.setText("Please select a file type of .csv")
                msg.exec_()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Open File"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Grade Level</p></body></html>"))
        self.textBrowser_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Student Name</span></p></body></html>"))
        self.textBrowser_3.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"> ID number</p></body></html>"))
        self.textBrowser_4.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Advisory</p></body></html>"))
        self.textBrowser_5.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Choice 1</p></body></html>"))
        self.textBrowser_6.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Choice 2</p></body></html>"))
        self.textBrowser_7.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Choice 3</p></body></html>"))
        self.textBrowser_8.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.textBrowser_9.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt; font-weight:600;\">Student Club Selection file</span></p></body></html>"))
        self.textBrowser_10.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt; font-weight:600;\">Please identify what column the following information is listed in</span></p></body></html>"))
        self.textBrowser_11.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt; font-weight:600;\">Please identify club name and available club seats for each club in the following format:</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt; font-weight:600;\">club 1 name, club 1 seats, club 2 name, club 2 seats, etc...</span></p></body></html>"))
        self.pushButton_2.setText(_translate("MainWindow", "Assign Clubs!"))
        self.textBrowser_12.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt; font-weight:600;\">Please identify output file name</span></p></body></html>"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
